Git 是一个非常强大的分布式版本控制工具，以下是常用的 Git 命令及其用途，分为基础操作、分支管理、远程操作和其他高级操作。

---

### **基础操作**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git init`                              | 初始化一个新的 Git 仓库。                  |
| `git status`                            | 查看当前工作区的状态（修改、未跟踪文件等）。|
| `git add <file>`                        | 将指定文件添加到暂存区。                   |
| `git add .`                             | 添加当前目录下的所有更改到暂存区。         |
| `git commit -m "message"`               | 提交暂存区的更改到本地仓库，并附加说明。   |
| `git log`                               | 查看提交历史记录。                         |
| `git log --oneline`                     | 简洁模式查看提交历史记录。                 |
| `git diff`                              | 查看未暂存的更改。                         |
| `git diff --staged`                     | 查看已暂存但未提交的更改。                 |
| `git checkout -- <file>`                | 撤销对文件的修改，恢复到上次提交的版本。   |
| `git reset <file>`                      | 将文件从暂存区移回工作区。                 |
| `git reset --hard`                      | 重置工作区和暂存区到上次提交的状态。       |

---

### **分支管理**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git branch`                            | 查看本地分支列表。                         |
| `git branch -a`                         | 查看所有分支（包括远程分支）。             |
| `git branch <branch_name>`              | 创建一个新的分支。                         |
| `git checkout <branch_name>`            | 切换到指定分支。                           |
| `git checkout -b <branch_name>`         | 创建并切换到新的分支。                     |
| `git merge <branch_name>`               | 合并指定分支到当前分支。                   |
| `git branch -d <branch_name>`           | 删除本地分支。                             |
| `git branch -D <branch_name>`           | 强制删除本地分支。                         |

---

### **远程操作**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git remote -v`                         | 查看远程仓库地址。                         |
| `git remote add origin <url>`           | 添加远程仓库。                             |
| `git push origin <branch_name>`         | 将本地分支推送到远程仓库。                 |
| `git push -u origin <branch_name>`      | 推送分支并设置跟踪关系。                   |
| `git pull origin <branch_name>`         | 拉取远程仓库分支并合并到本地分支。         |
| `git fetch origin`                      | 获取远程仓库的最新提交，但不自动合并。     |
| `git clone <url>`                       | 克隆远程仓库到本地。                       |
| `git remote rm <name>`                  | 删除远程仓库连接。                         |

---

### **查看信息**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git show <commit_id>`                  | 查看某次提交的详细信息。                   |
| `git reflog`                            | 查看所有提交记录（包括被 reset 的提交）。   |
| `git blame <file>`                      | 查看文件每行代码的修改记录和提交者信息。   |

---

### **标签管理**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git tag`                               | 查看所有标签。                             |
| `git tag <tag_name>`                    | 创建轻量级标签。                           |
| `git tag -a <tag_name> -m "message"`    | 创建带注释的标签。                         |
| `git push origin <tag_name>`            | 推送标签到远程仓库。                       |
| `git push origin --tags`                | 推送所有标签到远程仓库。                   |
| `git tag -d <tag_name>`                 | 删除本地标签。                             |
| `git push origin :refs/tags/<tag_name>` | 删除远程仓库中的标签。                     |

---

### **变基与交互**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git rebase <branch_name>`              | 将一个分支的更改应用到当前分支。           |
| `git rebase -i <commit_id>`             | 交互式调整提交记录（合并、修改等）。       |
| `git cherry-pick <commit_id>`           | 将某个提交应用到当前分支。                 |

---

### **高级操作**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git stash`                             | 将当前未提交的修改保存到堆栈。             |
| `git stash list`                        | 查看保存的堆栈列表。                       |
| `git stash pop`                         | 取出最近一次保存的堆栈并应用到工作区。     |
| `git stash apply`                       | 应用某次保存的堆栈内容，但不删除它。       |
| `git cherry <branch_name>`              | 查看两个分支之间的差异。                   |
| `git bisect`                            | 二分查找引入问题的提交。                   |

---

### **常用配置命令**
| 命令                                    | 作用                                       |
|-----------------------------------------|--------------------------------------------|
| `git config --global user.name "Name"`  | 设置用户名。                               |
| `git config --global user.email "Email"`| 设置用户邮箱。                             |
| `git config --list`                     | 查看当前的 Git 配置。                      |
| `git config --global core.autocrlf true`| 自动处理换行符（Windows）。                |

---
